{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport { Component } from \"@angular/core\";\nimport { FormServiceService } from \"../form-service.service\";\nimport { FormArray, FormControl, FormGroup, Validators } from \"@angular/forms\";\nlet DynamicFormComponentComponent = class DynamicFormComponentComponent {\n  constructor(formService) {\n    this.formService = formService;\n    this.formGroupMap = {};\n    this.formService.getFormStructure().subscribe(formContent => {\n      console.log(formContent);\n      this.formContent = formContent;\n      this.intializeFormGroup(formContent);\n    });\n  }\n\n  onFormSubmission() {\n    console.log(this.dynamicFormGroup.value);\n  }\n\n  ngAfterViewInit() {}\n\n  intializeFormGroup(formContent) {\n    formContent.forEach(formTypeControl => {\n      if (![\"formGroup\", \"formArray\"].includes(formTypeControl.type)) {\n        if ((formTypeControl === null || formTypeControl === void 0 ? void 0 : formTypeControl.validations.length) > 0) {\n          this.formControlValidators = formTypeControl.validations.reduce((acc, currentvalue) => {\n            if (currentvalue.name === \"required\") {\n              acc.push(Validators.required);\n            }\n\n            return acc;\n          }, []);\n        }\n\n        this.formGroupMap[formTypeControl.name] = new FormControl(formTypeControl.value || \"\", this.formControlValidators);\n      } else if (formTypeControl.type == \"formGroup\") {\n        this.formGroupMap[formTypeControl.name] = new FormGroup(formTypeControl.value.reduce((acc, v) => {\n          acc[v.name] = new FormControl(v.value || \"\", v.validations.reduce((accumulator, validation) => {\n            if (validation.name === \"required\") {\n              accumulator.push(Validators.required);\n            }\n\n            return accumulator;\n          }, []));\n          return acc;\n        }, {}));\n      } else {\n        this.formGroupMap[formTypeControl.name] = new FormArray([new FormGroup({\n          primarySkill: new FormControl(\"\"),\n          secondarySkill: new FormControl(\"\")\n        })]);\n        /*\n        new FormGroup(\n            (formTypeControl.value as IFormStructureInterface[]).reduce(\n              (a, v) => {\n                a[v.name] = new FormControl(\n                  v.value,\n                  v.validations.reduce((accumulator, validation) => {\n                    if (validation.name === \"required\") {\n                      accumulator.push(Validators.required);\n                    }\n                    return accumulator;\n                  }, [])\n                );\n                return a;\n              },\n              {}\n            )\n          ),\n        */\n      }\n    });\n    this.dynamicFormGroup = new FormGroup(this.formGroupMap);\n    console.log(\"Dynamic Form\");\n    console.log(this.dynamicFormGroup);\n    this.dynamicFormGroup.valueChanges.subscribe(v => {\n      console.log(\"Value Changes\");\n      console.log(v);\n    });\n    this.dynamicFormGroup.statusChanges.subscribe(v => {\n      console.log(\"Status Changes\");\n      console.log(v);\n    });\n  }\n\n  addMoreSkill() {\n    this.dynamicFormGroup.controls[\"skills\"].push(new FormGroup({\n      primarySkill: new FormControl(\"\"),\n      secondarySkill: new FormControl(\"\")\n    }));\n  }\n\n};\nDynamicFormComponentComponent = __decorate([Component({\n  selector: \"app-dynamic-form-component\",\n  templateUrl: \"./dynamic-form-component.component.html\",\n  styleUrls: [\"./dynamic-form-component.component.sass\"]\n}), __metadata(\"design:paramtypes\", [FormServiceService])], DynamicFormComponentComponent);\nexport { DynamicFormComponentComponent };","map":null,"metadata":{},"sourceType":"module"}